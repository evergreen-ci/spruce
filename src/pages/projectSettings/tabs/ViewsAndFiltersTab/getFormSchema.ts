import { GetFormSchema } from "components/SpruceForm";
import { CardFieldTemplate } from "components/SpruceForm/FieldTemplates";
import widgets from "components/SpruceForm/Widgets";
import { ProjectHealthView } from "gql/generated/types";
import { ProjectType } from "../utils";

export const getFormSchema = (
  projectType: ProjectType,
): ReturnType<GetFormSchema> => ({
  fields: {},
  schema: {
    definitions: {
      filterArray: {
        title: "",
        type: "array" as "array",
        default: [],
        items: {
          type: "object" as "object",
          properties: {
            expression: {
              type: "string" as "string",
              title: "Filter Expression",
              default: "",
              minLength: 1,
              format: "validRegex",
            },
            caseSensitive: {
              type: "boolean" as "boolean",
              title: "Case",
              default: false,
              oneOf: [
                {
                  type: "boolean" as "boolean",
                  title: "Insensitive",
                  enum: [false],
                },
                {
                  type: "boolean" as "boolean",
                  title: "Sensitive",
                  enum: [true],
                },
              ],
            },
            exactMatch: {
              type: "boolean" as "boolean",
              title: "Match",
              default: true,
              oneOf: [
                {
                  type: "boolean" as "boolean",
                  title: "Exact",
                  enum: [true],
                },
                {
                  type: "boolean" as "boolean",
                  title: "Inverse",
                  enum: [false],
                },
              ],
            },
          },
        },
      },
    },
    type: "object" as "object",
    properties: {
      ...(projectType !== ProjectType.Repo && {
        view: {
          title: "Project Health View",
          type: "object" as "object",
          description:
            "This setting will define the default behavior of the Project Health page for all viewers of this project. Users can still toggle between views.",
          properties: {
            projectHealthView: {
              type: "string" as "string",
              title: "",
              oneOf: [
                {
                  type: "string" as "string",
                  title: "Default view",
                  enum: [ProjectHealthView.Failed],
                  description:
                    "Displays only task failures, making it easier to identify them, and groups tasks by status if they don't match any search criteria. Consider using it for troubleshooting specific issues.",
                },
                {
                  type: "string" as "string",
                  title: "All tasks view",
                  enum: [ProjectHealthView.All],
                  description:
                    "Displays all tasks without grouping. This view can be helpful for getting a comprehensive overview of all tasks.",
                },
              ],
            },
          },
        },
      }),
      parsleyFiltersTitle: {
        type: "null",
        title: "Parsley Filters",
      },
      parsleyFilters: { $ref: "#/definitions/filterArray" },
      ...(projectType === ProjectType.AttachedProject && {
        repoData: {
          type: "object" as "object",
          title: "Repo Filters",
          properties: {
            parsleyFilters: { $ref: "#/definitions/filterArray" },
          },
        },
      }),
    },
  },
  uiSchema: {
    view: {
      "ui:ObjectFieldTemplate": CardFieldTemplate,
      projectHealthView: {
        "ui:widget": "radio",
      },
    },
    parsleyFiltersTitle: {
      "ui:sectionTitle": true,
    },
    parsleyFilters: {
      "ui:addButtonText": "Add filter",
      "ui:orderable": false,
      "ui:description":
        "These filters will be available by default in the Parsley log viewer for any logs generated by this project.",
      "ui:useExpandableCard": true,
      "ui:data-cy": "parsley-filter-list",
      items: {
        "ui:displayTitle": "New Parsley Filter",
        "ui:label": false,
        expression: {
          "ui:data-cy": "parsley-filter-expression",
        },
        caseSensitive: {
          "ui:widget": widgets.SegmentedControlWidget,
          "ui:aria-controls": ["case-insensitive", "case-sensitive"],
          "ui:data-cy": "parsley-filter-case-sensitivity",
          "ui:sizeVariant": "xsmall",
        },
        exactMatch: {
          "ui:widget": widgets.SegmentedControlWidget,
          "ui:aria-controls": ["exact-match", "inverse-match"],
          "ui:data-cy": "parsley-filter-match-type",
          "ui:sizeVariant": "xsmall",
        },
      },
    },
    repoData: {
      parsleyFilters: {
        "ui:fullWidth": true,
        "ui:placeholder": "Repo has no filters defined.",
        "ui:readonly": true,
        "ui:showLabel": false,
        "ui:useExpandableCard": true,
        items: {
          caseSensitive: {
            "ui:widget": widgets.SegmentedControlWidget,
            "ui:sizeVariant": "xsmall",
          },
          exactMatch: {
            "ui:widget": widgets.SegmentedControlWidget,
            "ui:sizeVariant": "xsmall",
          },
        },
      },
    },
  },
});
