// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConfigDrop matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ConfigDrop
    updateClientConfig={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <WithStyles(Card)>
          <WithStyles(CardContent)>
            <WithStyles(DropzoneArea)
              acceptedFiles={
                Array [
                  "application/json",
                ]
              }
              dropzoneText="Drop your config file here"
              filesLimit={1}
              onChange={[Function]}
            />
          </WithStyles(CardContent)>
          <WithStyles(CardActions)>
            <WithStyles(Button)
              className="save"
              onClick={[Function]}
              variant="outlined"
            >
              Save
            </WithStyles(Button)>
          </WithStyles(CardActions)>
        </WithStyles(Card)>,
        <WithStyles(Snackbar)
          action={
            Array [
              <WithStyles(IconButton)
                color="inherit"
                onClick={[Function]}
              >
                <pure(CloseIcon) />
              </WithStyles(IconButton)>,
            ]
          }
          anchorOrigin={
            Object {
              "horizontal": "left",
              "vertical": "bottom",
            }
          }
          message=""
          onClose={[Function]}
          open={false}
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(CardContent)>
              <WithStyles(DropzoneArea)
                acceptedFiles={
                  Array [
                    "application/json",
                  ]
                }
                dropzoneText="Drop your config file here"
                filesLimit={1}
                onChange={[Function]}
              />
            </WithStyles(CardContent)>,
            <WithStyles(CardActions)>
              <WithStyles(Button)
                className="save"
                onClick={[Function]}
                variant="outlined"
              >
                Save
              </WithStyles(Button)>
            </WithStyles(CardActions)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(DropzoneArea)
                acceptedFiles={
                  Array [
                    "application/json",
                  ]
                }
                dropzoneText="Drop your config file here"
                filesLimit={1}
                onChange={[Function]}
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "acceptedFiles": Array [
                  "application/json",
                ],
                "dropzoneText": "Drop your config file here",
                "filesLimit": 1,
                "onChange": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Button)
                className="save"
                onClick={[Function]}
                variant="outlined"
              >
                Save
              </WithStyles(Button)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Save",
                "className": "save",
                "onClick": [Function],
                "variant": "outlined",
              },
              "ref": null,
              "rendered": "Save",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "action": Array [
            <WithStyles(IconButton)
              color="inherit"
              onClick={[Function]}
            >
              <pure(CloseIcon) />
            </WithStyles(IconButton)>,
          ],
          "anchorOrigin": Object {
            "horizontal": "left",
            "vertical": "bottom",
          },
          "message": "",
          "onClose": [Function],
          "open": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <WithStyles(Card)>
            <WithStyles(CardContent)>
              <WithStyles(DropzoneArea)
                acceptedFiles={
                  Array [
                    "application/json",
                  ]
                }
                dropzoneText="Drop your config file here"
                filesLimit={1}
                onChange={[Function]}
              />
            </WithStyles(CardContent)>
            <WithStyles(CardActions)>
              <WithStyles(Button)
                className="save"
                onClick={[Function]}
                variant="outlined"
              >
                Save
              </WithStyles(Button)>
            </WithStyles(CardActions)>
          </WithStyles(Card)>,
          <WithStyles(Snackbar)
            action={
              Array [
                <WithStyles(IconButton)
                  color="inherit"
                  onClick={[Function]}
                >
                  <pure(CloseIcon) />
                </WithStyles(IconButton)>,
              ]
            }
            anchorOrigin={
              Object {
                "horizontal": "left",
                "vertical": "bottom",
              }
            }
            message=""
            onClose={[Function]}
            open={false}
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(CardContent)>
                <WithStyles(DropzoneArea)
                  acceptedFiles={
                    Array [
                      "application/json",
                    ]
                  }
                  dropzoneText="Drop your config file here"
                  filesLimit={1}
                  onChange={[Function]}
                />
              </WithStyles(CardContent)>,
              <WithStyles(CardActions)>
                <WithStyles(Button)
                  className="save"
                  onClick={[Function]}
                  variant="outlined"
                >
                  Save
                </WithStyles(Button)>
              </WithStyles(CardActions)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(DropzoneArea)
                  acceptedFiles={
                    Array [
                      "application/json",
                    ]
                  }
                  dropzoneText="Drop your config file here"
                  filesLimit={1}
                  onChange={[Function]}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "acceptedFiles": Array [
                    "application/json",
                  ],
                  "dropzoneText": "Drop your config file here",
                  "filesLimit": 1,
                  "onChange": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(Button)
                  className="save"
                  onClick={[Function]}
                  variant="outlined"
                >
                  Save
                </WithStyles(Button)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Save",
                  "className": "save",
                  "onClick": [Function],
                  "variant": "outlined",
                },
                "ref": null,
                "rendered": "Save",
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "action": Array [
              <WithStyles(IconButton)
                color="inherit"
                onClick={[Function]}
              >
                <pure(CloseIcon) />
              </WithStyles(IconButton)>,
            ],
            "anchorOrigin": Object {
              "horizontal": "left",
              "vertical": "bottom",
            },
            "message": "",
            "onClose": [Function],
            "open": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
