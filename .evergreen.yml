stepback: true
command_type: test
ignore:
  - "*.md"
  - ".github/*"

modules:
- name: evergreen
  repo: git@github.com:evergreen-ci/evergreen.git
  branch: main
  auto_update: true

pre:
  - func: get-project

#######################################
#              Functions              #
#######################################
functions:
  get-project:
    - command: git.get_project
      type: setup
      params:
        directory: spruce
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - spruce/scripts/prepare-shell.sh
    - command: expansions.update
      params:
        file: expansion.yml

  get-evergreen-project:
    command: git.get_project
    type: setup
    params:
      directory: evergreen
      revisions:
        evergreen: ${evergreen_rev}

  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: /opt/golang/go1.16/bin/go
          MONGODB_URL: ${mongodb_url}
          DECOMPRESS: ${decompress}
        working_dir: evergreen
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        background: true
        working_dir: evergreen
        command: make start-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: evergreen
        command: make configure-mongod

  setup-node:
    command: shell.exec
    params:
      script: |
        ${PREPARE_SHELL}

        git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
        cd "$NVM_DIR"
        git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        cd "$PROJECT_DIRECTORY"

        nvm install --no-progress 16.17.0
        nvm alias default 16.17.0

        npm install -g yarn

  run-make-background:
    command: subprocess.exec
    params:
      working_dir: evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: true
      env:
        SETTINGS_OVERRIDE: file
        GOROOT: /opt/golang/go1.16

  wait-for-evergreen:
    command: shell.exec
    type: setup
    params:
      working_dir: spruce
      script: ./scripts/wait-for-evergreen.sh

  sym-link:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ln -s evergreen/graphql/schema sdlschema

  yarn-serve:
    command: shell.exec
    type: setup
    params:
      working_dir: spruce
      background: true
      script: |
        ${PREPARE_SHELL}
        yarn serve

  yarn-install:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn install

  yarn-test:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn test --reporters=default --reporters=jest-junit --testPathIgnorePatterns=storybook.test.ts

  yarn-eslint:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn eslint:strict

  yarn-tsc:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn check-types

  yarn-build:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn build:local

  yarn-build-storybook:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn build-storybook
    
  yarn-snapshot:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn test --reporters="jest-junit" --reporters="default" --testPathPattern="storybook.test.ts"

  check-codegen:
    command: shell.exec
    params:
      working_dir: spruce
      shell: bash
      script: |
        chmod +x check_codegen.sh
        ./check_codegen.sh

  run-cypress-tests:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn cy:run --record --key ${cypress_record_key} --reporter junit
        
  copy-cmdrc:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        cp env/.cmdrc_sample.json env/.cmdrc.json

  attach-test-results:
    command: attach.xunit_results
    params:
      files:
        - "./spruce/bin/jest/*.xml"

  attach-cypress-results:
    - command: s3.put
      type: system
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          ["spruce/cypress/screenshots/*"]
        remote_file: spruce/${task_id}/
        bucket: mciuploads
        content_type: image/png
        permissions: public-read
        display_name: "screenshot:"
    - command: s3.put
      type: system
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          ["spruce/cypress/videos/*"]
        remote_file: spruce/${task_id}/
        bucket: mciuploads
        content_type: video/mp4
        permissions: public-read
        display_name: "video:"
    - command: attach.xunit_results
      params:
        files:
          - "./spruce/bin/cypress/*.xml"

  attach-server-logs:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["evergreen/server_logs.txt"]
      remote_file: spruce/${task_id}/
      bucket: mciuploads
      content_type: text/plain
      permissions: public-read
      display_name: "server logs"

  attach-source-map:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "spruce/build/source_map.html"
      remote_file: spruce/${task_id}/source_map.html
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: "source map"

  attach-storybook:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        - storybook-static/
      remote_file: spruce/${task_id}/storybook/
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: storybook-
  
  # Ideally we can get rid of this command upon the completion of EVG-17334.
  attach-storybook-assets-css:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["spruce/storybook-static/assets/*.css"]
      remote_file: spruce/${task_id}/storybook/assets/
      bucket: mciuploads
      content_type: text/css
      permissions: public-read
      display_name: storybook_assets_css_

  # Ideally we can get rid of this command upon the completion of EVG-17334.
  attach-storybook-assets-js:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["spruce/storybook-static/assets/*.js"]
      remote_file: spruce/${task_id}/storybook/assets/
      bucket: mciuploads
      content_type: application/javascript
      permissions: public-read
      display_name: storybook_assets_js_

  # Ideally we can get rid of this command upon the completion of EVG-17334.
  attach-storybook-assets-map:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["spruce/storybook-static/assets/*.js.map"]
      remote_file: spruce/${task_id}/storybook/assets/
      bucket: mciuploads
      content_type: application/json
      permissions: public-read
      display_name: storybook_assets_map_
  
  attach-codegen-diff:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        - "spruce/bin/codegen.diff"
      remote_file: spruce/${task_id}/codegen/
      bucket: mciuploads
      content_type: text/plain
      permissions: public-read
    
  setup-credentials:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        echo "Generating .cmdrc.json"
        REACT_APP_BUGSNAG_API_KEY=${REACT_APP_BUGSNAG_API_KEY} REACT_APP_NEW_RELIC_ACCOUNT_ID=${REACT_APP_NEW_RELIC_ACCOUNT_ID} REACT_APP_NEW_RELIC_AGENT_ID=${REACT_APP_NEW_RELIC_AGENT_ID} REACT_APP_NEW_RELIC_APPLICATION_ID=${REACT_APP_NEW_RELIC_APPLICATION_ID} REACT_APP_NEW_RELIC_LICENSE_KEY=${REACT_APP_NEW_RELIC_LICENSE_KEY} REACT_APP_NEW_RELIC_TRUST_KEY=${REACT_APP_NEW_RELIC_TRUST_KEY} REACT_APP_DEPLOYS_EMAIL=${REACT_APP_DEPLOYS_EMAIL} node cli-scripts/setup-credentials.js

        echo "populating evergreen.yml"
        cat <<EOF > .evergreen.yml
        api_server_host: ${evergreen_api_server_host}
        ui_server_host: ${evergreen_ui_server_host}
        api_key: ${evergreen_api_key}
        user: ${evergreen_user}
        EOF

        echo "Done populating"

  deploy-to-prod:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        BUCKET=${bucket} AWS_ACCESS_KEY_ID=${aws_key} AWS_SECRET_ACCESS_KEY=${aws_secret}  yarn deploy; yarn upload-source-maps;

  build-prod:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        chmod +x scripts/app-version.sh
        . ./scripts/app-version.sh
        echo "Building Production version: $REACT_APP_VERSION"
        yarn build:prod
  
  send-email:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export AUTHOR_EMAIL=${author_email}
        export REACT_APP_DEPLOYS_EMAIL=${REACT_APP_DEPLOYS_EMAIL}
        export EXECUTION=${execution}
        bash email.sh


#######################################
#                Tasks                #
#######################################

tasks:
  - name: compile
    commands:
    - func: yarn-install
    - func: copy-cmdrc
    - func: sym-link
    - func: yarn-build
    - func: attach-source-map

  - name: storybook
    commands:
    - func: setup-node
    - func: yarn-install
    - func: yarn-build-storybook
    - func: attach-storybook
    - func: attach-storybook-assets-css
    - func: attach-storybook-assets-js
    - func: attach-storybook-assets-map

  - name: test
    commands:
    - func: yarn-install
    - func: yarn-test
    - func: attach-test-results

  - name: lint
    commands:
    - func: sym-link
    - func: yarn-install
    - func: yarn-eslint

  - name: type_check
    commands:
    - func: sym-link
    - func: yarn-install
    - func: yarn-tsc

  - name: snapshots
    commands:
    - func: yarn-install
    - func: yarn-snapshot

  - name: e2e_test
    commands:
    - func: get-evergreen-project
    - func: setup-mongodb
    - func: copy-cmdrc
    - func: run-make-background
      vars:
        target: local-evergreen
    - func: yarn-install
    - func: sym-link
    - func: yarn-build
    - func: yarn-serve
    - func: wait-for-evergreen
    - func: run-cypress-tests
    - func: attach-cypress-results
    
  - name: send_email
    commands:
    - func: setup-credentials
    - func: send-email

  - name: check_codegen
    commands:
    - func: sym-link
    - func: yarn-install
    - func: check-codegen
    - func: attach-codegen-diff

  - name: deploy_to_prod
    commands:
    - func: setup-credentials
    - func: yarn-install
    - func: sym-link
    - func: build-prod
    - func: deploy-to-prod
    - func: send-email


buildvariants:
  - name: ubuntu2004
    display_name: Ubuntu 20.04
    run_on:
    - ubuntu2004-large
    modules:
      - evergreen
    tasks:
    - name: compile
    - name: test
    - name: lint
    - name: type_check
    - name: e2e_test
    - name: storybook
    - name: check_codegen
    - name: snapshots
    - name: deploy_to_prod
      git_tag_only: true
      patchable: false
      priority: 100
