stepback: true
command_type: test
ignore:
  - "*.md"
  - ".github/*"

modules:
  - name: evergreen
    repo: git@github.com:evergreen-ci/evergreen.git
    branch: main
    auto_update: true
  - name: logkeeper
    repo: git@github.com:evergreen-ci/logkeeper.git
    branch: main
    auto_update: true

pre:
  - func: get-project
  - func: setup-node
  - func: yarn-install

post:
  - func: attach-codegen-diff
  - func: attach-cypress-results
  - func: attach-source-map
  - func: attach-storybook
  - func: attach-test-results
  - func: attach-email

#######################################
#              Functions              #
#######################################
functions:
  get-project:
    command: git.get_project
    type: setup
    params:
      directory: spruce

  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGODB_URL: ${mongodb_url_2204}
          MONGODB_DECOMPRESS: ${decompress}
        working_dir: spruce/evergreen
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGOSH_URL: ${mongosh_url_2204}
          MONGOSH_DECOMPRESS: ${decompress}
        working_dir: spruce/evergreen
        command: make get-mongosh
    - command: subprocess.exec
      type: setup
      params:
        background: true
        working_dir: spruce/evergreen
        command: make start-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: spruce/evergreen
        command: make configure-mongod

  setup-node:
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - spruce/scripts/prepare-shell.sh
    - command: expansions.update
      params:
        file: expansion.yml
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}

          # Fetch NVM and install it into this task's .nvm directory
          # Once downloaded, source nvm and install yarn
          git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
          cd "$NVM_DIR"
          git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          cd -

          nvm install --no-progress --default ${node_version}
          npm install -g yarn

  run-make-background:
    command: subprocess.exec
    params:
      working_dir: spruce/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: true
      env:
        SETTINGS_OVERRIDE: file
        GOROOT: ${goroot}

  wait-for-evergreen:
    command: shell.exec
    type: setup
    exec_timeout_secs: 600
    params:
      working_dir: spruce
      script: ./scripts/wait-for-evergreen.sh

  sym-link:
    command: shell.exec
    params:
      working_dir: spruce
      shell: bash
      script: |
        ln -s evergreen/graphql/schema sdlschema

  run-logkeeper:
    command: shell.exec
    params:
      working_dir: spruce/logkeeper
      background: true
      script: go run main/logkeeper.go --localPath _bucketdata
      shell: bash
      env:
        GOROOT: ${goroot}
        PATH: ${goroot}/bin:$PATH
        LK_CORS_ORIGINS: http:\/\/localhost:\d+

  seed-logkeeper:
    command: s3.get
    type: setup
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      extract_to: spruce/logkeeper
      remote_file: _bucketdata.tar.gz
      bucket: parsley-test

  yarn-serve:
    command: shell.exec
    type: setup
    params:
      working_dir: spruce
      background: true
      script: |
        ${PREPARE_SHELL}
        yarn serve

  yarn-install:
    command: shell.exec
    params:
      working_dir: spruce
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn install

  yarn-test:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn test --reporters=default --reporters=jest-junit --testPathIgnorePatterns=storybook.test.ts

  yarn-eslint:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn eslint:strict

  yarn-tsc:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn check-types

  yarn-build:
    command: shell.exec
    params:
      working_dir: spruce
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn build:local

  yarn-build-storybook:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn build-storybook
    
  yarn-snapshot:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn test --reporters="jest-junit" --reporters="default" --testPathPattern="storybook.test.ts"

  check-codegen:
    command: shell.exec
    params:
      working_dir: spruce
      shell: bash
      script: |
        ${PREPARE_SHELL}
        chmod +x check_codegen.sh
        ./check_codegen.sh

  run-cypress-tests:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ${PREPARE_SHELL}
        yarn cy:run --record --key ${cypress_record_key} --reporter junit
        
  attach-test-results:
    command: attach.xunit_results
    params:
      files:
        - "./spruce/bin/jest/*.xml"

  attach-cypress-results:
    - command: s3.put
      type: system
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          ["spruce/cypress/screenshots/*"]
        remote_file: spruce/${task_id}/
        bucket: mciuploads
        content_type: image/png
        permissions: public-read
        display_name: "screenshot:"
    - command: s3.put
      type: system
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          ["spruce/cypress/videos/*"]
        remote_file: spruce/${task_id}/
        bucket: mciuploads
        content_type: video/mp4
        permissions: public-read
        display_name: "video:"
    - command: attach.xunit_results
      params:
        files:
          - "./spruce/bin/cypress/*.xml"

  attach-source-map:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "spruce/build/source_map.html"
      remote_file: spruce/${task_id}/source_map.html
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: "source map"

  attach-storybook:
    - command: s3.put
      type: system
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          ["spruce/storybook-static/*.html"]
        remote_file: spruce/${task_id}/storybook/
        bucket: mciuploads
        content_type: text/html
        permissions: public-read
        preserve_path: true
    - command: s3.put
      type: system
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          ["spruce/storybook-static/**/*.js$", "spruce/storybook-static/**/*.mjs$"]
        remote_file: spruce/${task_id}/storybook/
        bucket: mciuploads
        content_type: application/javascript
        permissions: public-read
        preserve_path: true
    - command: s3.put
      type: system
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          ["spruce/storybook-static/**/*.js.map"]
        remote_file: spruce/${task_id}/storybook/
        bucket: mciuploads
        content_type: application/json
        permissions: public-read
        preserve_path: true
    - command: s3.put
      type: system
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          ["spruce/storybook-static/**/*.css"]
        remote_file: spruce/${task_id}/storybook/
        bucket: mciuploads
        content_type: text/css
        permissions: public-read
        preserve_path: true
    - command: s3.put
      type: system
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          ["spruce/storybook-static/**/*.json"]
        remote_file: spruce/${task_id}/storybook/
        bucket: mciuploads
        content_type: application/json
        permissions: public-read
        preserve_path: true
  
  attach-codegen-diff:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        - "spruce/bin/codegen.diff"
      remote_file: spruce/${task_id}/codegen/
      bucket: mciuploads
      content_type: text/plain
      permissions: public-read
  
  attach-email:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        - "spruce/body.txt"
      remote_file: spruce/${task_id}/
      bucket: mciuploads
      content_type: text/plain
      permissions: public-read

  setup-credentials:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        echo "Generating .cmdrc.json"
        REACT_APP_BUGSNAG_API_KEY=${REACT_APP_BUGSNAG_API_KEY} \
        REACT_APP_SENTRY_DSN=${REACT_APP_SENTRY_DSN} \
        REACT_APP_NEW_RELIC_ACCOUNT_ID=${REACT_APP_NEW_RELIC_ACCOUNT_ID} \
        REACT_APP_NEW_RELIC_AGENT_ID=${REACT_APP_NEW_RELIC_AGENT_ID} \
        REACT_APP_NEW_RELIC_APPLICATION_ID=${REACT_APP_NEW_RELIC_APPLICATION_ID} \
        REACT_APP_NEW_RELIC_LICENSE_KEY=${REACT_APP_NEW_RELIC_LICENSE_KEY} \
        REACT_APP_NEW_RELIC_TRUST_KEY=${REACT_APP_NEW_RELIC_TRUST_KEY} \
        REACT_APP_DEPLOYS_EMAIL=${REACT_APP_DEPLOYS_EMAIL} \
        REACT_APP_HONEYCOMB_BASE_URL=${REACT_APP_HONEYCOMB_BASE_URL} \
        node scripts/setup-credentials.js

        echo "populating evergreen.yml"
        cat <<EOF > .evergreen.yml
        api_server_host: ${evergreen_api_server_host}
        ui_server_host: ${evergreen_ui_server_host}
        api_key: ${evergreen_api_key}
        user: ${evergreen_user}
        EOF

        echo "Done populating"
  
  prod-deploy:
    command: shell.exec
    params:
      working_dir: spruce
      shell: bash
      script: |
        ${PREPARE_SHELL}
        REACT_APP_BUGSNAG_API_KEY=${REACT_APP_BUGSNAG_API_KEY} \
        BUCKET=${bucket} \
        AWS_ACCESS_KEY_ID=${aws_key} \
        AWS_SECRET_ACCESS_KEY=${aws_secret} \
        EXECUTION=${execution} \
        DEPLOYS_EMAIL=${DEPLOYS_EMAIL} \
        AUTHOR_EMAIL=${author_email} \
        yarn deploy:prod --ci



#######################################
#                Tasks                #
#######################################

tasks:
  - name: compile
    commands:
      - func: sym-link
      - func: yarn-build

  - name: storybook
    commands:
      - func: yarn-build-storybook

  - name: test
    commands:
      - func: yarn-test

  - name: lint
    commands:
      - func: sym-link
      - func: yarn-eslint

  - name: type_check
    commands:
      - func: sym-link
      - func: yarn-tsc

  - name: snapshots
    commands:
      - func: yarn-snapshot

  - name: e2e_test
    commands:
      - func: setup-mongodb
      - func: run-make-background
        vars:
          target: local-evergreen
      - func: sym-link
      - func: seed-logkeeper
      - func: run-logkeeper
      - func: yarn-build
      - func: yarn-serve
      - func: wait-for-evergreen
      - func: run-cypress-tests
    
  - name: check_codegen
    commands:
      - func: sym-link
      - func: check-codegen

  - name: deploy_to_prod
    commands:
      - func: setup-credentials
      - func: sym-link
      - func: prod-deploy

buildvariants:
  - name: ubuntu2204
    display_name: Ubuntu 22.04
    run_on:
      - ubuntu2204-large
    expansions:
      goroot: /opt/golang/go1.20
      mongodb_url_2204: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-6.0.6.tgz
      mongosh_url_2204: https://downloads.mongodb.com/compass/mongosh-1.9.0-linux-x64.tgz
      node_version: 16.17.0
    modules:
      - evergreen
      - logkeeper
    tasks:
      - name: compile
      - name: test
      - name: lint
      - name: type_check
      - name: e2e_test
      - name: storybook
      - name: check_codegen
      - name: snapshots
      - name: deploy_to_prod
        # git_tag_only: true
        # patchable: false
        priority: 100
