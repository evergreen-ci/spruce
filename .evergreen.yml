stepback: true
command_type: test
ignore:
  - "*.md"
  - ".github/*"

modules:
- name: evergreen
  repo: git@github.com:evergreen-ci/evergreen.git
  branch: master
  prefix: gopath/src/github.com/evergreen-ci

#######################################
#              Functions              #
#######################################
functions:
  get-project:
    command: git.get_project
    type: setup
    params:
      directory: spruce

  get-evergreen-project:
    command: git.get_project
    type: setup
    params:
      directory: spruce
      token: ${github_token}
      revisions:
        evergreen: ${evergreen_rev}

  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: /opt/golang/go1.9/bin/go
          MONGODB_URL: ${mongodb_url}
          DECOMPRESS: ${decompress}
        working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        background: true
        working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
        command: make start-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
        command: make check-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
        command: make init-rs

  run-make:
    command: subprocess.exec
    params:
      working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: true
      env:
        ACL_ENABLED: ${acl_enabled}
        AWS_KEY: ${aws_key}
        AWS_SECRET: ${aws_secret}
        CLIENT_URL: https://s3.amazonaws.com/mciuploads/evergreen/${task_id}/evergreen-ci/evergreen/clients/${goos}_${goarch}/evergreen
        DEBUG_ENABLED: ${debug}
        DISABLE_COVERAGE: ${disable_coverage}
        DOCKER_HOST: ${docker_host}
        EVERGREEN_ALL: "true"
        GOARCH: ${goarch}
        GO_BIN_PATH: ${gobin}
        LEGACY_GO_BIN_PATH: ${legacyGobin}
        GOOS: ${goos}
        GOPATH: ${workdir}/spruce/gopath
        GOROOT: ${goroot}
        IS_DOCKER: ${is_docker}
        KARMA_REPORTER: junit
        NODE_BIN_PATH: ${nodebin}
        RACE_DETECTOR: ${race_detector}
        SETTINGS_OVERRIDE: creds.yml
        TEST_TIMEOUT: ${test_timeout}
        VENDOR_PKG: "github.com/${trigger_repo_owner}/${trigger_repo_name}"
        VENDOR_REVISION: ${trigger_revision}
        XC_BUILD: ${xc_build}

  npm-start:
    command: subprocess.exec
    type: setup
    params:
      working_dir: spruce
      background: true
      command: npm start

  npm-install:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        npm install

  npm-test:
    command: subprocess.exec
    params:
      working_dir: spruce
      binary: npm
      args: [test, --, -u, --reporters=default, --reporters=jest-junit]
      env:
        CI: "true"

  npm-lint:
    command: subprocess.exec
    params:
      working_dir: spruce
      binary: npm
      args: [run, lint]

  npm-build:
    command: subprocess.exec
    params:
      working_dir: spruce
      binary: npm
      args: [run, build]

  npm-build:
    command: subprocess.exec
    params:
      working_dir: spruce
      binary: npm
      args: [run, build]

  npm-coverage:
    command: subprocess.exec
    params:
      working_dir: spruce
      binary: npm
      args: [run, coverage]

  run-cypress-tests:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        npm run cy:run --record --key ${cypress_record_key}

  attach-results:
    command: attach.xunit_results
    params:
      files:
        - "./spruce/junit.xml"

#######################################
#                Tasks                #
#######################################

tasks:
  - name: compile
    commands:
    - func: get-project
    - func: npm-install
    - func: npm-build
    - func: npm-build

  - name: test
    commands:
    - func: get-project
    - func: npm-install
    - func: npm-test
    - func: attach-results

  - name: lint
    commands:
    - func: get-project
    - func: npm-install
    - func: npm-lint

  - name: coverage
    commands:
    - func: get-project
    - func: npm-install
    - func: npm-coverage

  - name: e2e_test
    commands:
    - func: get-evergreen-project
    - func: setup-mongodb
    - func: run-make
      vars:
        target: "local-evergreen"
    - func: npm-install
    - func: npm-start
    - func: run-cypress-tests

buildvariants:
  - name: ubuntu1604
    display_name: Ubuntu 16.04
    run_on:
    - ubuntu1604-test
    modules:
      - evergreen
    tasks:
    - name: compile
    - name: test
    - name: lint
    - name: coverage
    - name: e2e_test
