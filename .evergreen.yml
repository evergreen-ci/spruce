stepback: true
command_type: test
ignore:
  - "*.md"
  - ".github/*"

modules:
- name: evergreen
  repo: git@github.com:evergreen-ci/evergreen.git
  branch: main
  prefix: gopath/src/github.com/evergreen-ci

#######################################
#              Functions              #
#######################################
functions:
  get-project:
    command: git.get_project
    type: setup
    params:
      directory: spruce

  get-evergreen-project:
    command: git.get_project
    type: setup
    params:
      directory: spruce
      revisions:
        evergreen: ${evergreen_rev}

  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: /opt/golang/go1.9/bin/go
          MONGODB_URL: ${mongodb_url}
          DECOMPRESS: ${decompress}
        working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        background: true
        working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
        command: make start-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
        command: make check-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
        command: make init-rs

  run-make:
    command: subprocess.exec
    params:
      working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: false
      env:
        GOPATH: ${workdir}/spruce/gopath
        GO_BIN_PATH: /opt/golang/go1.13/bin/go
        GOROOT: /opt/golang/go1.13

  run-make-background:
    command: subprocess.exec
    params:
      working_dir: spruce/gopath/src/github.com/evergreen-ci/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: true
      env:
        SETTINGS_OVERRIDE: file
        GOPATH: ${workdir}/spruce/gopath
        GO_BIN_PATH: /opt/golang/go1.13/bin/go
        GOROOT: /opt/golang/go1.13

  sym-link:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        ln -s gopath/src/github.com/evergreen-ci/evergreen/graphql/schema.graphql sdlschema.graphql

  yarn-start:
    command: shell.exec
    type: setup
    params:
      working_dir: spruce
      background: true
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn run dev

  
  yarn-install:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn

  yarn-test:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn test -u --reporters=default --reporters=jest-junit

  yarn-eslint:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn eslint

  yarn-tsc:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn check-types

  yarn-build:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn build

  yarn-build-storybook:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn build-storybook

  yarn-coverage:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn coverage

  yarn-analyze:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn analyze

  run-cypress-tests:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        ./node_modules/.bin/wait-on http://localhost:3000
        ./node_modules/.bin/cypress run --record --key ${cypress_record_key} --reporter junit

  copy-cmdrc:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        cp env/.cmdrc_sample.json env/.cmdrc.json

  attach-results:
    command: attach.xunit_results
    params:
      files:
        - "./spruce/junit.xml"

  attach-cypress-screenshots:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["spruce/cypress/screenshots/*"]
      remote_file: spruce/${task_id}/
      bucket: mciuploads
      content_type: image/png
      permissions: public-read
      display_name: "screenshot:"

  attach-cypress-videos:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["spruce/cypress/videos/*"]
      remote_file: spruce/${task_id}/
      bucket: mciuploads
      content_type: video/mp4
      permissions: public-read
      display_name: "video:"

  attach-server-logs:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["gopath/src/github.com/evergreen-ci/evergreen/server_logs.txt"]
      remote_file: spruce/${task_id}/
      bucket: mciuploads
      content_type: text/plain
      permissions: public-read
      display_name: "server logs"

  attach-source-map:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "spruce/build/source_map.html"
      remote_file: spruce/${task_id}/source_map.html
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: "source map"

  attach-storybook:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        - storybook-static/
      remote_file: spruce/${task_id}/storybook/
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: storybook-
    
  setup-credentials:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        echo "Generating .cmdrc.json"
        REACT_APP_BUGSNAG_API_KEY=${REACT_APP_BUGSNAG_API_KEY} REACT_APP_NEW_RELIC_ACCOUNT_ID=${REACT_APP_NEW_RELIC_ACCOUNT_ID} REACT_APP_NEW_RELIC_AGENT_ID=${REACT_APP_NEW_RELIC_AGENT_ID} REACT_APP_NEW_RELIC_APPLICATION_ID=${REACT_APP_NEW_RELIC_APPLICATION_ID} REACT_APP_NEW_RELIC_LICENSE_KEY=${REACT_APP_NEW_RELIC_LICENSE_KEY} REACT_APP_NEW_RELIC_TRUST_KEY=${REACT_APP_NEW_RELIC_TRUST_KEY} REACT_APP_DEPLOYS_EMAIL=${REACT_APP_DEPLOYS_EMAIL} node cli-scripts/setup-credentials.js

        echo "populating evergreen.yml"
        cat <<EOF > .evergreen.yml
        api_server_host: ${evergreen_api_server_host}
        ui_server_host: ${evergreen_ui_server_host}
        api_key: ${evergreen_api_key}
        user: ${evergreen_user}
        EOF

        echo "Done populating"

  deploy-to-prod:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        BUCKET=${bucket} AWS_ACCESS_KEY_ID=${aws_key} AWS_SECRET_ACCESS_KEY=${aws_secret}  yarn deploy; yarn upload-source-maps;


  build-prod:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        export PATH=/opt/nodejs/node-v12.16.0-linux-x64/bin:$PATH
        yarn build:prod
  
  send-email:
    command: shell.exec
    params:
      working_dir: spruce
      script: |
        PREVIOUS_VERSION=$(git describe --tags  --abbrev=0  `git rev-list --tags --max-count=1 --skip=1`)
        BODY=$(git log --no-merges $PREVIOUS_VERSION..HEAD --pretty="format:%s (%h)")
        DATE=$(date +'%m/%d/%Y')
        ~/evergreen -c .evergreen.yml notify email -f ${author_email} -r ${REACT_APP_DEPLOYS_EMAIL} -s "$DATE Spruce Deploy ${task_name}" -b "$BODY"

#######################################
#                Tasks                #
#######################################

tasks:
  - name: compile
    commands:
    - func: get-project
    - func: yarn-install
    - func: copy-cmdrc
    - func: sym-link
    - func: yarn-build
    - func: yarn-analyze

  - name: storybook
    commands:
    - func: get-project
    - func: yarn-install
    - func: yarn-build-storybook
    - func: attach-storybook

  - name: test
    commands:
    - func: get-project
    - func: yarn-install
    - func: yarn-test

  - name: lint
    commands:
    - func: get-project
    - func: sym-link
    - func: yarn-install
    - func: yarn-eslint

  - name: type_check
    commands:
    - func: get-project
    - func: sym-link
    - func: yarn-install
    - func: yarn-tsc

  - name: coverage
    commands:
    - func: get-project
    - func: yarn-install
    - func: yarn-coverage

  - name: e2e_test
    commands:
    - func: get-evergreen-project
    - func: run-make
      vars:
        target: get-go-imports
    - func: setup-mongodb
    - func: copy-cmdrc
    - func: run-make-background
      vars:
        target: local-evergreen
    - func: yarn-install
    - func: sym-link
    - func: yarn-start
    - func: run-cypress-tests
    
  - name: send_email
    commands:
    - func: get-project
    - func: setup-credentials
    - func: send-email


  - name: deploy_to_prod
    commands:
    - func: get-project
    - func: setup-credentials
    - func: yarn-install
    - func: sym-link
    - func: build-prod
    - func: deploy-to-prod
    - func: send-email

buildvariants:
  - name: ubuntu1604
    display_name: Ubuntu 16.04
    run_on:
    - ubuntu1604-test
    modules:
      - evergreen
    tasks:
    - name: compile
    - name: test
    - name: lint
    - name: type_check
    - name: coverage
    - name: e2e_test
    - name: storybook
    - name: deploy_to_prod
      git_tag_only: true
      patchable: false

post:
  - func: attach-results
  - func: attach-cypress-screenshots
  - func: attach-cypress-videos
  - func: attach-server-logs
  - func: attach-source-map
